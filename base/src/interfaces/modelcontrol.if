name: ModelControl

 /**
  * TODO: descr. of the interface
  */
	
	/**
	* Fügt dem Laufzeitsystem ein neues Modul des Typs moduleClassID hinzu.
	* @param moduleClassName Bestimmt die Art des Moduls das hinzugefügt wird.
	* @param modID Eine eindeutige ID für das neue Modul.
	*/
	addModule string moduleClassName
	
	/**
	* Verknüpft den Eingang eines Moduls mit dem Ausgang eines anderen.
	* @param moduleID1 Die ID des Quellmoduls
	* @param outputIndex Der Index des Ausgangs des Quellmoduls
	* @param moduleID2 Die ID des Zielmoduls
	* @param inputIndex Der Index des eingangs des Zielmoduls
	* @exception runtime_error Wird geworfen wenn eine moduleID
	*            ungültig ist, die out/inputIndex ungültig ist oder der
	*            Typ des Ausgangs nicht mit dem des Eingangs übereinstimmt.
	*/
	connectModules int moduleID1, int outputIndex, int moduleID2,int inputIndex

	/**
	* Löst die Verknüpfung eines Eingangs von dem zu moduleID gehörigen Modul.
	* @param moduleID Das Modul von dem ein Eingang gelöscht werden soll
	* @param inputIndex Der index des Eingangs
	* @exception runtime_error Wird geworfen wenn moduleID oder inputIndex
	*       ungültig ist.
	*/
	disconnectModules int moduleID, int inputIndex
	
	/**
	* Löscht ein Modul.
	* @param moduleID Das Modul das gelöscht wird
	*/
	deleteModule int moduleID

	/**
	*
	*/
	setModuleData int moduleID,int type,buffer buf

	/**
	*
	*/
	unSetModuleData int moduleID,int type
	
        /**
         */
        setEditGraphData int type, buffer buf

        /**
         */
        unSetEditGraphData int type


	/**
	* legt neuen gr an, alter graph bleibt aktiv
	*/
	newGraph string name
	
	/**
	*
	*/
	renameGraph string graphID, string newName

	/**
	*
	*/
  	copyGraph string graphID, string newName

	/**
	*
	*/
	saveGraph string graphID

	/**
	*
	*/
	deleteGraph string graphID
		
	/**
	* Veranlasst das Model dazu alle Receiver zu synchronisieren.
	* Dazu wird zuerst syncStarted() der Receiver aufgerufen.
	* Dann wird den Receivern über moduleAdded(), modulesConnected(),...
	* Aufrufe der gesamte bestehende Graph mitgeteilt.
	* Beendet wird die Synchronisation mit syncFinished().
	*/
	synchronize

	/**
	*
	*/	
	changeRenderedGraph string graphID, string snapID

	/**
	*
	*/
	changeEditGraph string graphID, string snapID

	/**
	*
	*/	
	newControlValueSet string graphID, string newSnapName

	/**
	*
	*/
	renameControlValueSet string graphID, string snapID, string newSnapName

	/**
	*
	*/
	copyControlValueSet string graphID, string snapID, string newSnapName

	/**
	*
	*/
	deleteControlValueSet string graphID, string snapID

	/**
	*
	*/	
	setInputValue int moduleID, int inputIndex, buffer buf

	/**
	*
	*/
	syncInputValue int moduleID, int inputIndex



